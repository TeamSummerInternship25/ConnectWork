"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.xfyunAiService = exports.XfyunAiService = void 0;
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
class XfyunAiService {
    constructor() {
        this.apiPassword = process.env.XFYUN_API_PASSWORD || '';
        this.baseUrl = process.env.XFYUN_BASE_URL || 'https://spark-api-open.xf-yun.com';
        if (!this.apiPassword) {
            console.warn('‚ö†Ô∏è XFYUN_API_PASSWORD not found, AI service will be disabled');
        }
        this.axiosInstance = axios_1.default.create({
            baseURL: this.baseUrl,
            headers: {
                'Authorization': `Bearer ${this.apiPassword}`,
                'Content-Type': 'application/json'
            },
            timeout: 120000
        });
    }
    isAvailable() {
        if (!this.apiPassword) {
            return false;
        }
        const parts = this.apiPassword.split(':');
        if (parts.length !== 2) {
            console.warn('‚ö†Ô∏è XFYUN_API_PASSWORD format should be "AppId:APISecret"');
            return false;
        }
        return true;
    }
    async chat(messages, model = 'lite', retries = 2) {
        if (!this.isAvailable()) {
            throw new Error('Xfyun AI service is not available');
        }
        for (let attempt = 0; attempt <= retries; attempt++) {
            try {
                console.log(`ü§ñ Xfyun AI request attempt ${attempt + 1}/${retries + 1}`);
                console.log(`üìù Request details:`, {
                    url: `${this.baseUrl}/v1/chat/completions`,
                    model,
                    messagesCount: messages.length,
                    hasAuth: !!this.apiPassword
                });
                const response = await this.axiosInstance.post('/v1/chat/completions', {
                    model,
                    messages,
                    max_tokens: 2000,
                    temperature: 0.7
                });
                const result = response.data;
                const content = result.choices[0]?.message?.content || '';
                if (!content.trim()) {
                    throw new Error('Empty response from AI service');
                }
                console.log('‚úÖ Xfyun AI request successful');
                return content;
            }
            catch (error) {
                const isLastAttempt = attempt === retries;
                const errorMessage = error.response?.data?.error || error.message;
                const statusCode = error.response?.status;
                const responseData = error.response?.data;
                console.error(`‚ùå Xfyun chat error (attempt ${attempt + 1}):`, {
                    message: errorMessage,
                    statusCode,
                    responseData,
                    timeout: error.code === 'ECONNABORTED'
                });
                if (isLastAttempt) {
                    throw new Error(`Xfyun AI request failed after ${retries + 1} attempts: ${errorMessage}`);
                }
                const waitTime = (attempt + 1) * 2000;
                console.log(`‚è≥ Waiting ${waitTime}ms before retry...`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
            }
        }
        throw new Error('Unexpected error in chat method');
    }
    async uploadFile(filePath, purpose = 'batch') {
        if (!this.isAvailable()) {
            throw new Error('Xfyun AI service is not available');
        }
        try {
            const formData = new form_data_1.default();
            formData.append('purpose', purpose);
            formData.append('file', fs_1.default.createReadStream(filePath));
            const response = await axios_1.default.post(`${this.baseUrl}/v1/files`, formData, {
                headers: {
                    'Authorization': `Bearer ${this.apiPassword}`,
                    ...formData.getHeaders()
                },
                timeout: 60000
            });
            return response.data;
        }
        catch (error) {
            console.error('Xfyun file upload error:', error.response?.data || error.message);
            throw new Error(`File upload failed: ${error.response?.data?.error || error.message}`);
        }
    }
    async createBatch(inputFileId, endpoint = '/v1/chat/completions') {
        if (!this.isAvailable()) {
            throw new Error('Xfyun AI service is not available');
        }
        try {
            const response = await this.axiosInstance.post('/v1/batches', {
                input_file_id: inputFileId,
                endpoint,
                completion_window: '24h',
                metadata: {
                    purpose: 'quiz_generation',
                    service: 'popquiz'
                }
            });
            return response.data;
        }
        catch (error) {
            console.error('Xfyun batch creation error:', error.response?.data || error.message);
            throw new Error(`Batch creation failed: ${error.response?.data?.error || error.message}`);
        }
    }
    async getBatch(batchId) {
        if (!this.isAvailable()) {
            throw new Error('Xfyun AI service is not available');
        }
        try {
            const response = await this.axiosInstance.get(`/v1/batches/${batchId}`);
            return response.data;
        }
        catch (error) {
            console.error('Xfyun batch query error:', error.response?.data || error.message);
            throw new Error(`Batch query failed: ${error.response?.data?.error || error.message}`);
        }
    }
    async downloadFile(fileId) {
        if (!this.isAvailable()) {
            throw new Error('Xfyun AI service is not available');
        }
        try {
            const response = await this.axiosInstance.get(`/v1/files/${fileId}/content`);
            return response.data;
        }
        catch (error) {
            console.error('Xfyun file download error:', error.response?.data || error.message);
            throw new Error(`File download failed: ${error.response?.data?.error || error.message}`);
        }
    }
    createBatchRequestFile(requests) {
        const lines = requests.map(req => JSON.stringify(req));
        return lines.join('\n');
    }
    fixJsonFormat(jsonString) {
        try {
            JSON.parse(jsonString);
            console.log('‚úÖ JSONÊ†ºÂºèÊ≠£Á°ÆÔºåÊó†ÈúÄ‰øÆÂ§ç');
            return jsonString;
        }
        catch (originalError) {
            console.log('üîß JSONÈúÄË¶Å‰øÆÂ§çÔºåÂºÄÂßãÂ§ÑÁêÜ...');
        }
        try {
            let fixed = jsonString
                .replace(/^\uFEFF/, '')
                .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/\t/g, '\\t')
                .replace(/\\(?!["\\/bfnrt]|u[0-9a-fA-F]{4})/g, '\\\\');
            JSON.parse(fixed);
            console.log('‚úÖ Â∏∏ËßÑJSON‰øÆÂ§çÊàêÂäü');
            return fixed;
        }
        catch (error) {
            console.warn('‚ö†Ô∏è Â∏∏ËßÑJSON‰øÆÂ§çÂ§±Ë¥•ÔºåÂ∞ùËØïÊøÄËøõÊñπÊ≥ï:', error);
        }
        try {
            let aggressive = jsonString
                .replace(/[\x00-\x1F\x7F-\x9F]/g, '')
                .replace(/\\/g, '\\\\')
                .replace(/\\\\\\\\/g, '\\\\')
                .replace(/\\\\"/g, '\\"')
                .replace(/\\\\n/g, '\\n')
                .replace(/\\\\r/g, '\\r')
                .replace(/\\\\t/g, '\\t')
                .replace(/([^\\])'/g, '$1"')
                .replace(/^'/g, '"');
            JSON.parse(aggressive);
            console.log('‚úÖ ÊøÄËøõJSON‰øÆÂ§çÊàêÂäü');
            return aggressive;
        }
        catch (aggressiveError) {
            console.warn('‚ö†Ô∏è ÊøÄËøõ‰øÆÂ§çÂ§±Ë¥•ÔºåÂ∞ùËØïÊúÄÂêéÁöÑÊñπÊ≥ï:', aggressiveError);
        }
        try {
            let lastAttempt = jsonString
                .replace(/[^\x20-\x7E\u4e00-\u9fff]/g, '')
                .replace(/\\/g, '')
                .replace(/"/g, '\\"')
                .replace(/\\"/g, '"')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/\t/g, '\\t');
            JSON.parse(lastAttempt);
            console.log('‚úÖ ÊúÄÂêéÂ∞ùËØïJSON‰øÆÂ§çÊàêÂäü');
            return lastAttempt;
        }
        catch (finalError) {
            console.error('‚ùå ÊâÄÊúâJSON‰øÆÂ§çÊñπÊ≥ïÈÉΩÂ§±Ë¥•‰∫ÜÔºåËøîÂõûÂéüÂßãÂ≠óÁ¨¶‰∏≤');
            console.error('ÂéüÂßãÂÜÖÂÆπÈ¢ÑËßà:', jsonString.substring(0, 200));
            return jsonString;
        }
    }
    async generateQuiz(text, options = {}) {
        const prompt = this.buildQuizGenerationPrompt(text, options);
        const messages = [
            {
                role: 'system',
                content: 'You are an expert quiz generator. Generate high-quality multiple choice questions based on the provided content.'
            },
            {
                role: 'user',
                content: prompt
            }
        ];
        const response = await this.chat(messages, '4.0Ultra');
        try {
            let cleanResponse = response.trim();
            if (cleanResponse.startsWith('```json')) {
                cleanResponse = cleanResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '');
            }
            else if (cleanResponse.startsWith('```')) {
                cleanResponse = cleanResponse.replace(/^```\s*/, '').replace(/\s*```$/, '');
            }
            const jsonStart = cleanResponse.indexOf('{');
            const jsonEnd = cleanResponse.lastIndexOf('}');
            if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
                cleanResponse = cleanResponse.substring(jsonStart, jsonEnd + 1);
            }
            cleanResponse = this.fixJsonFormat(cleanResponse);
            const parsedResponse = JSON.parse(cleanResponse);
            if (!parsedResponse.title || !parsedResponse.questions || !Array.isArray(parsedResponse.questions)) {
                console.error('Invalid quiz structure:', parsedResponse);
                throw new Error('Quiz response missing required fields');
            }
            return parsedResponse;
        }
        catch (error) {
            console.error('‚ùå Failed to parse quiz response from Xfyun AI');
            console.error('üìÑ Original response length:', response.length);
            console.error('üìÑ Original response preview:', response.substring(0, 500) + '...');
            if (error instanceof SyntaxError && error.message.includes('position')) {
                const match = error.message.match(/position (\d+)/);
                if (match) {
                    const position = parseInt(match[1]);
                    const start = Math.max(0, position - 50);
                    const end = Math.min(response.length, position + 50);
                    console.error('üîç Error context around position', position, ':', response.substring(start, end));
                }
            }
            console.error('üö® Parse error details:', error);
            console.log('üîÑ Â∞ùËØï‰ΩøÁî®Ê≠£ÂàôË°®ËææÂºèÊèêÂèñQuizÂÜÖÂÆπ...');
            const extractedQuiz = this.extractQuizFromText(response);
            if (extractedQuiz) {
                console.log('‚úÖ ÊàêÂäü‰ªéÊñáÊú¨‰∏≠ÊèêÂèñQuizÂÜÖÂÆπ');
                return extractedQuiz;
            }
            throw new Error(`Invalid quiz response format: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    extractQuizFromText(text) {
        try {
            console.log('üîç Â∞ùËØï‰ªéÊñáÊú¨‰∏≠ÊèêÂèñQuizÁªìÊûÑ...');
            const titleMatch = text.match(/["']?title["']?\s*:\s*["']([^"']+)["']/i) ||
                text.match(/Ê†áÈ¢ò[Ôºö:]\s*["']?([^"'\n]+)["']?/i);
            const title = titleMatch ? titleMatch[1].trim() : 'Ëá™Âä®ÁîüÊàêÁöÑÊµãÈ™å';
            const questions = [];
            const questionPatterns = [
                /ÈóÆÈ¢ò\s*\d*[Ôºö:]\s*([^?\n]+\?)/gi,
                /["']?question["']?\s*:\s*["']([^"']+)["']/gi,
                /\d+\.\s*([^?\n]+\?)/gi
            ];
            let questionMatches = [];
            for (const pattern of questionPatterns) {
                const matches = Array.from(text.matchAll(pattern));
                if (matches.length > 0) {
                    questionMatches = matches;
                    break;
                }
            }
            for (let i = 0; i < Math.min(questionMatches.length, 5); i++) {
                const questionText = questionMatches[i][1].trim();
                const questionIndex = text.indexOf(questionMatches[i][0]);
                const nextQuestionIndex = i + 1 < questionMatches.length ?
                    text.indexOf(questionMatches[i + 1][0]) : text.length;
                const questionSection = text.substring(questionIndex, nextQuestionIndex);
                const optionMatches = questionSection.match(/[A-D][Ôºâ)]\s*([^\n]+)/g) ||
                    questionSection.match(/["']?options?["']?\s*:\s*\[([^\]]+)\]/i);
                let options = ['ÈÄâÈ°πA', 'ÈÄâÈ°πB', 'ÈÄâÈ°πC', 'ÈÄâÈ°πD'];
                if (optionMatches && optionMatches.length >= 4) {
                    options = optionMatches.slice(0, 4).map(opt => opt.replace(/^[A-D][Ôºâ)]?\s*/, '').trim());
                }
                const answerMatch = questionSection.match(/["']?correctAnswer["']?\s*:\s*["']?([A-D])["']?/i) ||
                    questionSection.match(/Ê≠£Á°ÆÁ≠îÊ°à[Ôºö:]\s*([A-D])/i) ||
                    questionSection.match(/Á≠îÊ°à[Ôºö:]\s*([A-D])/i);
                const correctAnswer = answerMatch ? answerMatch[1].toUpperCase() : 'A';
                questions.push({
                    question: questionText,
                    options,
                    correctAnswer
                });
            }
            if (questions.length > 0) {
                return {
                    title,
                    questions
                };
            }
            return null;
        }
        catch (error) {
            console.error('‚ùå Ê≠£ÂàôË°®ËææÂºèÊèêÂèñÂ§±Ë¥•:', error);
            return null;
        }
    }
    buildQuizGenerationPrompt(text, options = {}) {
        const { questionCount = 5, difficulty = 'medium', timeLimit = 10 } = options;
        const isChinese = /[\u4e00-\u9fff]/.test(text);
        if (isChinese) {
            return `
Ê†πÊçÆ‰ª•‰∏ãÂÜÖÂÆπÔºåÁîüÊàê${questionCount}ÈÅìÈÄâÊã©È¢ò„ÄÇ

ÂÜÖÂÆπÔºö
${text}

Ë¶ÅÊ±ÇÔºö
1. ÊØèÈÅìÈ¢òÂøÖÈ°ªÊúâ4‰∏™ÈÄâÈ°πÔºàA„ÄÅB„ÄÅC„ÄÅDÔºâ
2. Âè™Êúâ‰∏Ä‰∏™ÈÄâÈ°πÊòØÊ≠£Á°ÆÁöÑ
3. È¢òÁõÆÈöæÂ∫¶‰∏∫${difficulty === 'easy' ? 'ÁÆÄÂçï' : difficulty === 'hard' ? 'Âõ∞Èöæ' : '‰∏≠Á≠â'}
4. ÊØèÈÅìÈ¢òÂ∫îËØ•Âú®${timeLimit}ÁßíÂÜÖÂèØ‰ª•ÂõûÁ≠î
5. È¢òÁõÆÂ∫îËØ•ÊµãËØïÁêÜËß£ËÉΩÂäõÔºåËÄå‰∏ç‰ªÖ‰ªÖÊòØËÆ∞ÂøÜ
6. ÈÅøÂÖçËøá‰∫éÊòéÊòæÊàñËøá‰∫éÊô¶Ê∂©ÁöÑÈ¢òÁõÆ
7. ÊâÄÊúâÂÜÖÂÆπÂøÖÈ°ª‰ΩøÁî®‰∏≠Êñá

ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèËøîÂõûÁªìÊûúÔºå‰∏çË¶ÅÊ∑ªÂä†‰ªª‰ΩïÂÖ∂‰ªñÊñáÂ≠óÔºö

{
  "title": "Âü∫‰∫éÂÜÖÂÆπÁöÑÊµãÈ™å",
  "questions": [
    {
      "question": "È¢òÁõÆÂÜÖÂÆπ",
      "optionA": "ÈÄâÈ°πA",
      "optionB": "ÈÄâÈ°πB",
      "optionC": "ÈÄâÈ°πC",
      "optionD": "ÈÄâÈ°πD",
      "correctAnswer": "A",
      "explanation": "Ê≠£Á°ÆÁ≠îÊ°àÁöÑÁÆÄË¶ÅËß£Èáä"
    }
  ]
}

ÈáçË¶ÅÔºö
- ÂøÖÈ°ªËøîÂõûÊúâÊïàÁöÑJSONÊ†ºÂºè
- correctAnswerÂøÖÈ°ªÊòØ"A"„ÄÅ"B"„ÄÅ"C"Êàñ"D"‰∏≠ÁöÑ‰∏Ä‰∏™
- ‰∏çË¶ÅÂú®JSONÂâçÂêéÊ∑ªÂä†‰ªª‰ΩïËß£ÈáäÊñáÂ≠ó
- Á°Æ‰øùÊâÄÊúâÂ≠óÁ¨¶‰∏≤ÈÉΩÁî®ÂèåÂºïÂè∑ÂåÖÂõ¥`;
        }
        else {
            return `
Based on the following content, generate ${questionCount} multiple choice questions.

Content:
${text}

Requirements:
1. Each question should have exactly 4 options (A, B, C, D)
2. Only one option should be correct
3. Questions should be ${difficulty} difficulty level
4. Each question should be answerable within ${timeLimit} seconds
5. Questions should test understanding, not just memorization
6. Avoid questions that are too obvious or too obscure

Return the result in this exact JSON format only, no additional text:

{
  "title": "Quiz based on provided content",
  "questions": [
    {
      "question": "Question text here",
      "optionA": "First option",
      "optionB": "Second option",
      "optionC": "Third option",
      "optionD": "Fourth option",
      "correctAnswer": "A",
      "explanation": "Brief explanation of why this is correct"
    }
  ]
}

Important:
- Must return valid JSON format
- correctAnswer must be exactly "A", "B", "C", or "D"
- Do not add any explanatory text before or after the JSON
- Ensure all strings are properly quoted`;
        }
    }
}
exports.XfyunAiService = XfyunAiService;
exports.xfyunAiService = new XfyunAiService();
//# sourceMappingURL=xfyunAiService.js.map